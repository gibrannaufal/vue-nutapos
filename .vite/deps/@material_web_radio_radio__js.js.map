{
  "version": 3,
  "sources": ["../../node_modules/@material/web/labs/behaviors/focusable.ts", "../../node_modules/@material/web/labs/behaviors/validators/radio-validator.ts", "../../node_modules/@material/web/radio/internal/single-selection-controller.ts", "../../node_modules/@material/web/radio/internal/radio.ts", "../../node_modules/@material/web/radio/internal/radio-styles.ts", "../../node_modules/@material/web/radio/radio.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {MixinBase, MixinReturn} from './mixin.js';\n\n/**\n * An element that can enable and disable `tabindex` focusability.\n */\nexport interface Focusable {\n  /**\n   * Whether or not the element can be focused. Defaults to true. Set to false\n   * to disable focusing (unless a user has set a `tabindex`).\n   */\n  [isFocusable]: boolean;\n}\n\n/**\n * A property symbol that indicates whether or not a `Focusable` element can be\n * focused.\n */\nexport const isFocusable = Symbol('isFocusable');\n\nconst privateIsFocusable = Symbol('privateIsFocusable');\nconst externalTabIndex = Symbol('externalTabIndex');\nconst isUpdatingTabIndex = Symbol('isUpdatingTabIndex');\nconst updateTabIndex = Symbol('updateTabIndex');\n\n/**\n * Mixes in focusable functionality for a class.\n *\n * Elements can enable and disable their focusability with the `isFocusable`\n * symbol property. Changing `tabIndex` will trigger a lit render, meaning\n * `this.tabIndex` can be used in template expressions.\n *\n * This mixin will preserve externally-set tabindices. If an element turns off\n * focusability, but a user sets `tabindex=\"0\"`, it will still be focusable.\n *\n * To remove user overrides and restore focusability control to the element,\n * remove the `tabindex` attribute.\n *\n * @param base The class to mix functionality into.\n * @return The provided class with `Focusable` mixed in.\n */\nexport function mixinFocusable<T extends MixinBase<LitElement>>(\n  base: T,\n): MixinReturn<T, Focusable> {\n  abstract class FocusableElement extends base implements Focusable {\n    @property({noAccessor: true})\n    declare tabIndex: number;\n\n    get [isFocusable]() {\n      return this[privateIsFocusable];\n    }\n\n    set [isFocusable](value: boolean) {\n      if (this[isFocusable] === value) {\n        return;\n      }\n\n      this[privateIsFocusable] = value;\n      this[updateTabIndex]();\n    }\n\n    [privateIsFocusable] = true;\n    [externalTabIndex]: number | null = null;\n    [isUpdatingTabIndex] = false;\n\n    override connectedCallback() {\n      super.connectedCallback();\n      this[updateTabIndex]();\n    }\n\n    override attributeChangedCallback(\n      name: string,\n      old: string | null,\n      value: string | null,\n    ) {\n      if (name !== 'tabindex') {\n        super.attributeChangedCallback(name, old, value);\n        return;\n      }\n\n      this.requestUpdate('tabIndex', Number(old ?? -1));\n      if (this[isUpdatingTabIndex]) {\n        // Not an externally-initiated update.\n        return;\n      }\n\n      if (!this.hasAttribute('tabindex')) {\n        // User removed the attribute, can now use internal tabIndex\n        this[externalTabIndex] = null;\n        this[updateTabIndex]();\n        return;\n      }\n\n      this[externalTabIndex] = this.tabIndex;\n    }\n\n    [updateTabIndex]() {\n      const internalTabIndex = this[isFocusable] ? 0 : -1;\n      const computedTabIndex = this[externalTabIndex] ?? internalTabIndex;\n\n      this[isUpdatingTabIndex] = true;\n      this.tabIndex = computedTabIndex;\n      this[isUpdatingTabIndex] = false;\n    }\n  }\n\n  return FocusableElement;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Validator} from './validator.js';\n\n/**\n * Constraint validation properties for a radio.\n */\nexport interface RadioState {\n  /**\n   * Whether the radio is checked.\n   */\n  readonly checked: boolean;\n\n  /**\n   * Whether the radio is required.\n   */\n  readonly required: boolean;\n}\n\n/**\n * Radio constraint validation properties for a single radio and its siblings.\n */\nexport type RadioGroupState = readonly [RadioState, ...RadioState[]];\n\n/**\n * A validator that provides constraint validation that emulates\n * `<input type=\"radio\">` validation.\n */\nexport class RadioValidator extends Validator<RadioGroupState> {\n  private radioElement?: HTMLInputElement;\n\n  protected override computeValidity(states: RadioGroupState) {\n    if (!this.radioElement) {\n      // Lazily create the radio element\n      this.radioElement = document.createElement('input');\n      this.radioElement.type = 'radio';\n      // A name is required for validation to run\n      this.radioElement.name = 'group';\n    }\n\n    let isRequired = false;\n    let isChecked = false;\n    for (const {checked, required} of states) {\n      if (required) {\n        isRequired = true;\n      }\n\n      if (checked) {\n        isChecked = true;\n      }\n    }\n\n    // Firefox v119 doesn't compute grouped radio validation correctly while\n    // they are detached from the DOM, which is why we don't render multiple\n    // virtual <input>s. Instead, we can check the required/checked states and\n    // grab the i18n'd validation message if the value is missing.\n    this.radioElement.checked = isChecked;\n    this.radioElement.required = isRequired;\n    return {\n      validity: {\n        valueMissing: isRequired && !isChecked,\n      },\n      validationMessage: this.radioElement.validationMessage,\n    };\n  }\n\n  protected override equals(\n    prevGroup: RadioGroupState,\n    nextGroup: RadioGroupState,\n  ) {\n    if (prevGroup.length !== nextGroup.length) {\n      return false;\n    }\n\n    for (let i = 0; i < prevGroup.length; i++) {\n      const prev = prevGroup[i];\n      const next = nextGroup[i];\n      if (prev.checked !== next.checked || prev.required !== next.required) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  protected override copy(states: RadioGroupState): RadioGroupState {\n    // Cast as unknown since typescript does not have enough information to\n    // infer that the array always has at least one element.\n    return states.map(({checked, required}) => ({\n      checked,\n      required,\n    })) as unknown as RadioGroupState;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveController} from 'lit';\n\n/**\n * An element that supports single-selection with `SingleSelectionController`.\n */\nexport interface SingleSelectionElement extends HTMLElement {\n  /**\n   * Whether or not the element is selected.\n   */\n  checked: boolean;\n}\n\n/**\n * A `ReactiveController` that provides root node-scoped single selection for\n * elements, similar to native `<input type=\"radio\">` selection.\n *\n * To use, elements should add the controller and call\n * `selectionController.handleCheckedChange()` in a getter/setter. This must\n * be synchronous to match native behavior.\n *\n * @example\n * const CHECKED = Symbol('checked');\n *\n * class MyToggle extends LitElement {\n *   get checked() { return this[CHECKED]; }\n *   set checked(checked: boolean) {\n *     const oldValue = this.checked;\n *     if (oldValue === checked) {\n *       return;\n *     }\n *\n *     this[CHECKED] = checked;\n *     this.selectionController.handleCheckedChange();\n *     this.requestUpdate('checked', oldValue);\n *   }\n *\n *   [CHECKED] = false;\n *\n *   private selectionController = new SingleSelectionController(this);\n *\n *   constructor() {\n *     super();\n *     this.addController(this.selectionController);\n *   }\n * }\n */\nexport class SingleSelectionController implements ReactiveController {\n  /**\n   * All single selection elements in the host element's root with the same\n   * `name` attribute, including the host element.\n   */\n  get controls(): [SingleSelectionElement, ...SingleSelectionElement[]] {\n    const name = this.host.getAttribute('name');\n    if (!name || !this.root || !this.host.isConnected) {\n      return [this.host];\n    }\n\n    // Cast as unknown since there is not enough information for typescript to\n    // know that there is always at least one element (the host).\n    return Array.from(\n      this.root.querySelectorAll<SingleSelectionElement>(`[name=\"${name}\"]`),\n    ) as unknown as [SingleSelectionElement, ...SingleSelectionElement[]];\n  }\n\n  private focused = false;\n  private root: ParentNode | null = null;\n\n  constructor(private readonly host: SingleSelectionElement) {}\n\n  hostConnected() {\n    this.root = this.host.getRootNode() as ParentNode;\n    this.host.addEventListener('keydown', this.handleKeyDown);\n    this.host.addEventListener('focusin', this.handleFocusIn);\n    this.host.addEventListener('focusout', this.handleFocusOut);\n    if (this.host.checked) {\n      // Uncheck other siblings when attached if already checked. This mimics\n      // native <input type=\"radio\"> behavior.\n      this.uncheckSiblings();\n    }\n\n    // Update siblings after a microtask to allow other synchronous connected\n    // callbacks to settle before triggering additional Lit updates. This avoids\n    // stack overflow issues when too many elements are being rendered and\n    // connected at the same time.\n    queueMicrotask(() => {\n      // Update for the newly added host.\n      this.updateTabIndices();\n    });\n  }\n\n  hostDisconnected() {\n    this.host.removeEventListener('keydown', this.handleKeyDown);\n    this.host.removeEventListener('focusin', this.handleFocusIn);\n    this.host.removeEventListener('focusout', this.handleFocusOut);\n    // Update siblings after a microtask to allow other synchronous disconnected\n    // callbacks to settle before triggering additional Lit updates. This avoids\n    // stack overflow issues when too many elements are being rendered and\n    // connected at the same time.\n    queueMicrotask(() => {\n      // Update for siblings that are still connected.\n      this.updateTabIndices();\n      this.root = null;\n    });\n  }\n\n  /**\n   * Should be called whenever the host's `checked` property changes\n   * synchronously.\n   */\n  handleCheckedChange() {\n    if (!this.host.checked) {\n      return;\n    }\n\n    this.uncheckSiblings();\n    this.updateTabIndices();\n  }\n\n  private readonly handleFocusIn = () => {\n    this.focused = true;\n    this.updateTabIndices();\n  };\n\n  private readonly handleFocusOut = () => {\n    this.focused = false;\n    this.updateTabIndices();\n  };\n\n  private uncheckSiblings() {\n    for (const sibling of this.controls) {\n      if (sibling !== this.host) {\n        sibling.checked = false;\n      }\n    }\n  }\n\n  /**\n   * Updates the `tabindex` of the host and its siblings.\n   */\n  private updateTabIndices() {\n    // There are three tabindex states for a group of elements:\n    // 1. If any are checked, that element is focusable.\n    const siblings = this.controls;\n    const checkedSibling = siblings.find((sibling) => sibling.checked);\n    // 2. If an element is focused, the others are no longer focusable.\n    if (checkedSibling || this.focused) {\n      const focusable = checkedSibling || this.host;\n      focusable.tabIndex = 0;\n\n      for (const sibling of siblings) {\n        if (sibling !== focusable) {\n          sibling.tabIndex = -1;\n        }\n      }\n      return;\n    }\n\n    // 3. If none are checked or focused, all are focusable.\n    for (const sibling of siblings) {\n      sibling.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Handles arrow key events from the host. Using the arrow keys will\n   * select and check the next or previous sibling with the host's\n   * `name` attribute.\n   */\n  private readonly handleKeyDown = (event: KeyboardEvent) => {\n    const isDown = event.key === 'ArrowDown';\n    const isUp = event.key === 'ArrowUp';\n    const isLeft = event.key === 'ArrowLeft';\n    const isRight = event.key === 'ArrowRight';\n    // Ignore non-arrow keys\n    if (!isLeft && !isRight && !isDown && !isUp) {\n      return;\n    }\n\n    // Don't try to select another sibling if there aren't any.\n    const siblings = this.controls;\n    if (!siblings.length) {\n      return;\n    }\n\n    // Prevent default interactions on the element for arrow keys,\n    // since this controller will introduce new behavior.\n    event.preventDefault();\n\n    // Check if moving forwards or backwards\n    const isRtl = getComputedStyle(this.host).direction === 'rtl';\n    const forwards = isRtl ? isLeft || isDown : isRight || isDown;\n\n    const hostIndex = siblings.indexOf(this.host);\n    let nextIndex = forwards ? hostIndex + 1 : hostIndex - 1;\n    // Search for the next sibling that is not disabled to select.\n    // If we return to the host index, there is nothing to select.\n    while (nextIndex !== hostIndex) {\n      if (nextIndex >= siblings.length) {\n        // Return to start if moving past the last item.\n        nextIndex = 0;\n      } else if (nextIndex < 0) {\n        // Go to end if moving before the first item.\n        nextIndex = siblings.length - 1;\n      }\n\n      // Check if the next sibling is disabled. If so,\n      // move the index and continue searching.\n      const nextSibling = siblings[nextIndex];\n      if (nextSibling.hasAttribute('disabled')) {\n        if (forwards) {\n          nextIndex++;\n        } else {\n          nextIndex--;\n        }\n\n        continue;\n      }\n\n      // Uncheck and remove focusability from other siblings.\n      for (const sibling of siblings) {\n        if (sibling !== nextSibling) {\n          sibling.checked = false;\n          sibling.tabIndex = -1;\n          sibling.blur();\n        }\n      }\n\n      // The next sibling should be checked, focused and dispatch a change event\n      nextSibling.checked = true;\n      nextSibling.tabIndex = 0;\n      nextSibling.focus();\n      // Fire a change event since the change is triggered by a user action.\n      // This matches native <input type=\"radio\"> behavior.\n      nextSibling.dispatchEvent(new Event('change', {bubbles: true}));\n\n      break;\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, isServer, LitElement} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {isActivationClick} from '../../internal/events/form-label-activation.js';\nimport {\n  createValidator,\n  getValidityAnchor,\n  mixinConstraintValidation,\n} from '../../labs/behaviors/constraint-validation.js';\nimport {\n  internals,\n  mixinElementInternals,\n} from '../../labs/behaviors/element-internals.js';\nimport {mixinFocusable} from '../../labs/behaviors/focusable.js';\nimport {\n  getFormState,\n  getFormValue,\n  mixinFormAssociated,\n} from '../../labs/behaviors/form-associated.js';\nimport {RadioValidator} from '../../labs/behaviors/validators/radio-validator.js';\n\nimport {SingleSelectionController} from './single-selection-controller.js';\n\nconst CHECKED = Symbol('checked');\nlet maskId = 0;\n\n// Separate variable needed for closure.\nconst radioBaseClass = mixinConstraintValidation(\n  mixinFormAssociated(mixinElementInternals(mixinFocusable(LitElement))),\n);\n\n/**\n * A radio component.\n *\n * @fires input {InputEvent} Dispatched when the value changes from user\n * interaction. --bubbles\n * @fires change {Event} Dispatched when the value changes from user\n * interaction. --bubbles --composed\n */\nexport class Radio extends radioBaseClass {\n  // Unique maskId is required because of a Safari bug that fail to persist\n  // reference to the mask. This should be removed once the bug is fixed.\n  private readonly maskId = `cutout${++maskId}`;\n\n  /**\n   * Whether or not the radio is selected.\n   */\n  @property({type: Boolean})\n  get checked() {\n    return this[CHECKED];\n  }\n  set checked(checked: boolean) {\n    const wasChecked = this.checked;\n    if (wasChecked === checked) {\n      return;\n    }\n\n    this[CHECKED] = checked;\n    this.requestUpdate('checked', wasChecked);\n    this.selectionController.handleCheckedChange();\n  }\n\n  [CHECKED] = false;\n\n  /**\n   * Whether or not the radio is required. If any radio is required in a group,\n   * all radios are implicitly required.\n   */\n  @property({type: Boolean}) required = false;\n\n  /**\n   * The element value to use in form submission when checked.\n   */\n  @property() value = 'on';\n\n  @query('.container') private readonly container!: HTMLElement;\n  private readonly selectionController = new SingleSelectionController(this);\n\n  constructor() {\n    super();\n    this.addController(this.selectionController);\n    if (!isServer) {\n      this[internals].role = 'radio';\n      this.addEventListener('click', this.handleClick.bind(this));\n      this.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n  }\n\n  protected override render() {\n    const classes = {'checked': this.checked};\n    return html`\n      <div class=\"container ${classMap(classes)}\" aria-hidden=\"true\">\n        <md-ripple\n          part=\"ripple\"\n          .control=${this}\n          ?disabled=${this.disabled}></md-ripple>\n        <md-focus-ring part=\"focus-ring\" .control=${this}></md-focus-ring>\n        <svg class=\"icon\" viewBox=\"0 0 20 20\">\n          <mask id=\"${this.maskId}\">\n            <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n            <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"black\" />\n          </mask>\n          <circle\n            class=\"outer circle\"\n            cx=\"10\"\n            cy=\"10\"\n            r=\"10\"\n            mask=\"url(#${this.maskId})\" />\n          <circle class=\"inner circle\" cx=\"10\" cy=\"10\" r=\"5\" />\n        </svg>\n\n        <div class=\"touch-target\"></div>\n      </div>\n    `;\n  }\n\n  protected override updated() {\n    this[internals].ariaChecked = String(this.checked);\n  }\n\n  private async handleClick(event: Event) {\n    if (this.disabled) {\n      return;\n    }\n\n    // allow event to propagate to user code after a microtask.\n    await 0;\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (isActivationClick(event)) {\n      this.focus();\n    }\n\n    // Per spec, clicking on a radio input always selects it.\n    this.checked = true;\n    this.dispatchEvent(new Event('change', {bubbles: true}));\n    this.dispatchEvent(\n      new InputEvent('input', {bubbles: true, composed: true}),\n    );\n  }\n\n  private async handleKeydown(event: KeyboardEvent) {\n    // allow event to propagate to user code after a microtask.\n    await 0;\n    if (event.key !== ' ' || event.defaultPrevented) {\n      return;\n    }\n\n    this.click();\n  }\n\n  // Writable mixin properties for lit-html binding, needed for lit-analyzer\n  declare disabled: boolean;\n  declare name: string;\n\n  override [getFormValue]() {\n    return this.checked ? this.value : null;\n  }\n\n  override [getFormState]() {\n    return String(this.checked);\n  }\n\n  override formResetCallback() {\n    // The checked property does not reflect, so the original attribute set by\n    // the user is used to determine the default value.\n    this.checked = this.hasAttribute('checked');\n  }\n\n  override formStateRestoreCallback(state: string) {\n    this.checked = state === 'true';\n  }\n\n  override [createValidator]() {\n    return new RadioValidator(() => {\n      if (!this.selectionController) {\n        // Validation runs on superclass construction, so selection controller\n        // might not actually be ready until this class constructs.\n        return [this];\n      }\n\n      return this.selectionController.controls as [Radio, ...Radio[]];\n    });\n  }\n\n  override [getValidityAnchor]() {\n    return this.container;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./radio/internal/radio-styles.css.\nimport {css} from 'lit';\nexport const styles = css`@layer{:host{display:inline-flex;height:var(--md-radio-icon-size, 20px);outline:none;position:relative;vertical-align:top;width:var(--md-radio-icon-size, 20px);-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;--md-ripple-hover-color: var(--md-radio-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-radio-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-pressed-opacity: var(--md-radio-pressed-state-layer-opacity, 0.12)}:host([disabled]){cursor:default}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--md-radio-icon-size, 20px))/2)}.container{display:flex;height:100%;place-content:center;place-items:center;width:100%}md-focus-ring{height:44px;inset:unset;width:44px}.checked{--md-ripple-hover-color: var(--md-radio-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-hover-opacity: var(--md-radio-selected-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-radio-selected-pressed-state-layer-opacity, 0.12)}.touch-target{height:48px;position:absolute;width:48px}:host([touch-target=none]) .touch-target{display:none}md-ripple{border-radius:50%;height:var(--md-radio-state-layer-size, 40px);inset:unset;width:var(--md-radio-state-layer-size, 40px)}.icon{fill:var(--md-radio-icon-color, var(--md-sys-color-on-surface-variant, #49454f));inset:0;position:absolute}.outer.circle{transition:fill 50ms linear}.inner.circle{opacity:0;transform-origin:center;transition:opacity 50ms linear}.checked .icon{fill:var(--md-radio-selected-icon-color, var(--md-sys-color-primary, #6750a4))}.checked .inner.circle{animation:inner-circle-grow 300ms cubic-bezier(0.05, 0.7, 0.1, 1);opacity:1}@keyframes inner-circle-grow{from{transform:scale(0)}to{transform:scale(1)}}:host([disabled]) .circle{animation-duration:0s;transition-duration:0s}:host(:hover) .icon{fill:var(--md-radio-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:focus-within) .icon{fill:var(--md-radio-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:active) .icon{fill:var(--md-radio-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host([disabled]) .icon{fill:var(--md-radio-disabled-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-unselected-icon-opacity, 0.38)}:host(:hover) .checked .icon{fill:var(--md-radio-selected-hover-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:focus-within) .checked .icon{fill:var(--md-radio-selected-focus-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:active) .checked .icon{fill:var(--md-radio-selected-pressed-icon-color, var(--md-sys-color-primary, #6750a4))}:host([disabled]) .checked .icon{fill:var(--md-radio-disabled-selected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-selected-icon-opacity, 0.38)}}@layer hcm{@media(forced-colors: active){.icon{fill:CanvasText}:host([disabled]) .icon{fill:GrayText;opacity:1}}}\n`;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {CSSResultOrNative} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {Radio} from './internal/radio.js';\nimport {styles} from './internal/radio-styles.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-radio': MdRadio;\n  }\n}\n\n/**\n * @summary Radio buttons allow users to select one option from a set.\n *\n * @description\n * Radio buttons are the recommended way to allow users to make a single\n * selection from a list of options.\n *\n * Only one radio button can be selected at a time.\n *\n * Use radio buttons to:\n * - Select a single option from a set\n * - Expose all available options\n *\n * @final\n * @suppress {visibility}\n */\n@customElement('md-radio')\nexport class MdRadio extends Radio {\n  static override styles: CSSResultOrNative[] = [styles];\n}\n"],
  "mappings": "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",
  "names": ["_a", "MdRadio"]
}
